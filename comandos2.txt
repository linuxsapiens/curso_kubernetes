
El número de agrupa los comandos, se refiere al número de diapositiva en la presentación
El número no es consecutivo ya que en algunas diapositivas, no se usaron comandos.


20.- Instalación de docker

sudo dnf install -y dnf-utils zip unzip

sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo

sudo dnf remove -y runc

sudo dnf install -y docker-ce docker-ce-cli containerd.io --nobest

sudo systemctl enable docker.service

sudo systemctl start docker.service

systemctl status docker.service

sudo usermod -aG docker $USER && newgrp docker

docker info

docker service

21.- Image vs containerd

docker run --name mongo -d mongo

docker top mongo

ps aux 

docker stop mongo

ps aux

docker container run --publish 80:80 nginx

  * abrir el navegador y verificar que en localhost esté en ejecución 
  * Ctrl-c para terminar la ejecución

docker container run --publish 80:80 --detach nginx

docker container ls 

docker container stop nginx

docker container ls -a

docker container run --publish 80:80 --detach --name webserver nginx

docker container ls -a

  * notar los distintos contenedores ( instancias ) en estado Up o Exit

docker container logs webserver

  * muestra los logs (registro de eventos) de un contenedor

docker container ls -a

docker container rm 4f8 78d 23a
  * utilizar los primeros 3 digitos del Image ID en el listado de contenedores

docker container rm -f 23a
  * -f para forzar la detención del contenedor antes de borrarlo

22.- Detalles de la ejecucón de contenedor

docker container run -d --name nginx nginx

docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

docker container top  nginx

docker container inspect mysql

docker container stats

  * notar los recursos que utilizan los contenedores

24.- Analizar los contendores listados en la dirección hub.docker.com usando el navegador

25.- Las capas de una imágen de docker

docker history nginx:latest

docker history mysql 

docker image inspect nginx

  * crear una cuenta en docker.com 

docker image tag nginx USUARIODOCKER/nginx

docker image push USUARIODOCKER/nginx

docker login

cat ./docker/config.json
  * muestra la configuración del usuario registrado en docker.com que se graba en la carpeta .docker del directorio de usuario

docker image push USUARIODOCKER/nginx

docker image tag USUARIODOCKER/nxingx USUARIODOCKER/nginx:test

docker image push USUARIODOCKER/nginx:test

  * revisar en la pagina hub.docker.com que al loguearse en la pagina existan las imageness taggeadas

26.- Crear Dokerfile

git clone https://github.com/linuxsapiens/curso_kubernetes.git

cd curso_kubernetes/docker

docker image build -t customnginx .

  * editar el archivo para agregar el puerto 8080 en EXPOSE 80 443

docker image ls 

docker image build -t customnginx .

  * notar que se tarda mucho menos, por que utiliza las capas que no cambiaron en la anterior construcción de imagen 

cd ..
cd second

  * revisar el archivo Dockerfile y el archivo index.html

docker image build -t nginx-with-html .
docker container run -p 80:80 --rm nginx-with-html
  * abrir en el navegador http://localhost para confirmar que funciona

docker image tag nginx-with-html USUARIODOCKER/nginx-with-html
docker image push USUARIODOCKER/nginx-with-html

28.- Docker volumes

  * Eliminar todos los contenedores, incluyendo los que no se estén ejecutando
docker container ls -abrir

docker container rm mysql mysql2 mysql3 mysql4 nginx

  * si alguno no pudiera eliminar por estar en ejecución, forzarlo usando -f
  docker container rm -f mysql 

docker pull mysql

docker inspect mysql 

docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql

docker container ls

docker inspect mysql 
  * Buscar la session "Mounts"

docker volume ls

docker volume inspect <ID_VOLUME>

docker container run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql 

docker volume ls

docker container stop mysql mysql2

docker container ls 

docker volume ls

docker container run -d --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v mysql-db:/var/lib/mysql mysql 

docker volume ls 

docker container stop mysql3

docker container run -d --name mysql4 -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v mysql-db:/var/lib/mysql mysql 

docker inspect mysql4 

29.- Docker - Bind

cd curso_kubernetes/second

cat Dockerfile

docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx

  * abrir un navegador para ver que si está funcionando 

docker container run -d --name nginx2 -p 8080:80 nginx

  * abrir una segunda terminal
docker container exec -it nginx bash
  * conecta con el contenedor 

#cd /usr/share/nginx/html
#ls -al

  * en la primer terminar ( host ) ejecutar lo siguiente: 
touch test.txt

  * en la segunda terminar ( container ) ejecutar de nuevo ls 
#ls -al
#exit

docker container stop nginx nginx2

30.- Docker-compose

  * install docker compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

docker-compose --version 

33.- k8s Objects

  * instalar kubectl

sudo cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

sudo yum install -y kubectl

  * Instalar minikube

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm

sudo rpm -Uvh minikube-latest.x86_64.rpm

minikube start --driver=docker

minikube status

kubectl get nodes

  * Minikube Demo

kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10

kubectl get deployments

kubectl expose deployment hello-minikube --type=NodePort --port=8080

minikube service hello-minikube --url

curl http://192.168.49.2:31522

kubectl delete services hello-minikube

kubectl delete deployment hello-minikube

kubectl get pods

34.- Demo PODs

kubectl run nginx --image=nginx

kubectl get pods

kubectl describe pod nginx

kubectl get pods -o wide

kubectl delete pod nginx

35.- YAML in kubernetes

  * instalar VSCode y agregar la extensión kubernetes by RedHat

  * editar un archivo llamado pos-definition.yml con el siguiente contenido

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
    type: front-end
spec:
  containers:
    - name: nginx-container
    - image: nginx

kubectl create -f ./pod-definition.yml

kubectl describe pod myapp-pod

kubectl describe pod myapp-pod | grep -i image

kubectl delete pod myapp-pod


kubectl run redis --image=redis123 --dry-run=client -o yaml > pod.yaml

kubectl apply -f pod.yaml

kubectl edit pod redis   
  * ( corregir el nombre de la imagen )

kubectl get pods 
  * ( comprobar vea que ya se puede instanciar redis ) 

36.- Replication controllers & ReplicaSet

  * Crear el archivo rc-definition.yml

kubectl create -f rc-definition.yml

kubectl get replicationcontroller

kubectl get pods

kubectl delete replicationcontroller myapp-rc

  * Crear el archivo replicaset-definition.yml

kubectl create -f replicaset-definition.yml

  * para escalar la cantidad de replicas se puede editar el archivo y luego aplicar

kubectl replace -f replicaset-definition.yml

  * otra forma es con el comando 

kubectl scale --replicas=6 -f replicaset-definition.yml

kubectl scale --replicas=7 replicaset myapp-replicaset

  * borrar un pod usando su nombre especifico
kubectl delete pod myapp-replicaset-46n9h

kubectl get pods

kubectl describe replicaset myapp-replicaset

37.- deployment

  * crear el archivo de deployment-definition.yml

kubectl create -f deployment-definition.yml

kubectl get deployments

kubectl get replicaset 

kubectl get pods

kubectl get all

39.- Deployment Strategy 

kubectl create -f deployment-definition.yml

kubectl get deployments

kubectl apply -f deployment-definition.yml 

kubectl set image deployment/myapp-deployment nginx=nginx:1.21

kubectl rollout status deployment/myapp-deployment

kubectl rollout history deployment/myapp-deployment

kubectl rollout undo deployment/myapp-deployment

42.- Namespace

kubectl get pods

kubectl get pods --namespace=kube-system

kubectl create -f pod.yaml

kubectl create -f namespace-dev.yml

kubectl create namespace prod

kubectl create -f pod.yaml --namespace=dev
  * también es posible especificar el namespace en el archivo yaml, dentro de la sección metadata: namespace: dev

kubectl get pods
kubectl get pods --namespace=dev
kubectl get pods --namespace=prod

kubectl config set-context $(kubectl config current-context) --namespace=dev

kubectl get pods
kubectl get pods --namespace=default
kubectl get pods --namespace=prod

kubectl get pods --all-namespaces

43.- Namespace

  * Revisar el archivo compute-quota.yml

47.- Service - NodePort

  * Crear el archivo service-definition.yml

kubectl get svc

minikube service myapp-service --url

48.- Service - ClusterIP

  * Se crea el archivo service-definition2.yml

kubectl crearte -f service-definition3.yml 

kubectl get services

49.- Service - LoadBalancer

  * Revisar el archivo service-definition3.yml

