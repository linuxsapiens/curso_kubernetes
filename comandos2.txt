
El número de agrupa los comandos, se refiere al número de diapositiva en la presentación
El número no es consecutivo ya que en algunas diapositivas, no se usaron comandos.


20.- Instalación de docker

sudo dnf install -y dnf-utils zip unzip

sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo

sudo dnf remove -y runc

sudo dnf install -y docker-ce docker-ce-cli containerd.io --nobest

sudo systemctl enable docker.service

sudo systemctl start docker.service

systemctl status docker.service

sudo usermod -aG docker $USER && newgrp docker

docker info

docker service

21.- Image vs containerd

docker run --name mongo -d mongo

docker top mongo

ps aux 

docker stop mongo

ps aux

docker container run --publish 80:80 nginx

  * abrir el navegador y verificar que en localhost esté en ejecución 
  * Ctrl-c para terminar la ejecución

docker container run --publish 80:80 --detach nginx

docker container ls 

docker container stop nginx

docker container ls -a

docker container run --publish 80:80 --detach --name webserver nginx

docker container ls -a

  * notar los distintos contenedores ( instancias ) en estado Up o Exit

docker container logs webserver

  * muestra los logs (registro de eventos) de un contenedor

docker container ls -a

docker container rm 4f8 78d 23a
  * utilizar los primeros 3 digitos del Image ID en el listado de contenedores

docker container rm -f 23a
  * -f para forzar la detención del contenedor antes de borrarlo

22.- Detalles de la ejecucón de contenedor

docker container run -d --name nginx nginx

docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

docker container top  nginx

docker container inspect mysql

docker container stats

  * notar los recursos que utilizan los contenedores

24.- Analizar los contendores listados en la dirección hub.docker.com usando el navegador

25.- Las capas de una imágen de docker

docker history nginx:latest

docker history mysql 

docker image inspect nginx

  * crear una cuenta en docker.com 

docker image tag nginx USUARIODOCKER/nginx

docker image push USUARIODOCKER/nginx

docker login

cat ./docker/config.json
  * muestra la configuración del usuario registrado en docker.com que se graba en la carpeta .docker del directorio de usuario

docker image push USUARIODOCKER/nginx

docker image tag USUARIODOCKER/nxingx USUARIODOCKER/nginx:test

docker image push USUARIODOCKER/nginx:test

  * revisar en la pagina hub.docker.com que al loguearse en la pagina existan las imageness taggeadas

26.- Crear Dokerfile

git pull http://github.com/linuxsapiens/curso_kubernetes.git

cd curso_kubernetes/docker

docker image build -t customnginx .

  * editar el archivo para agregar el puerto 8080 en EXPOSE 80 443

docker image ls 

docker image build -t customnginx .

  * notar que se tarda mucho menos, por que utiliza las capas que no cambiaron en la anterior construcción de imagen 

cd ..
cd second

  * revisar el archivo Dockerfile y el archivo index.html

docker image build -t nginx-with-html .
docker container run -p 80:80 --rm nginx-with-html
  * abrir en el navegador http://localhost para confirmar que funciona

docker image tag nginx-with-html USUARIODOCKER/nginx-with-html
docker image push USUARIODOCKER/nginx-with-html

28.- Docker volumes

docker pull mysql

docker inspect mysql 

docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD mysql

docker container ls

docker inspect mysql 
  * Buscar la session "Mounts"

docker volume ls

docker volume inspect <ID_VOLUME>

docker container run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD mysql 

docker volume ls

docker container stop mysql mysql2

docker container ls 

docker volume ls

docker container run -d --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD -v mysql-db:/var/lib/mysql mysql 

docker volume ls 

docker container stop mysql3

docker container run -d --name mysql4 -e MYSQL_ALLOW_EMPTY_PASSWORD -v mysql-db:/var/lib/mysql mysql 

docker inspect mysql4 

29.- Docker - Bind

cd curso_kubernetes/second

cat Dockerfile

docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx

  * abrir un navegador para ver que si está funcionando 

docker container run -d --name nginx2 -p 8080:80 nginx

  * abrir una segunda terminal
docker container exec -it nginx bash
  * conecta con el contenedor 

#cd /usr/share/nginx/html
#ls -al

  * en la primer terminar ( host ) ejecutar lo siguiente: 
touch test.txt

  * en la segunda terminar ( container ) ejecutar de nuevo ls 
#ls -al
#exit

docker container stop nginx nginx2

30.- Docker-compose

  * install docker compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

docker-compose --version 

